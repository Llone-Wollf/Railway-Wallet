diff --git a/node_modules/@react-navigation/bottom-tabs/src/types.tsx b/node_modules/@react-navigation/bottom-tabs/src/types.tsx
index 03c3412..a8e4560 100644
--- a/node_modules/@react-navigation/bottom-tabs/src/types.tsx
+++ b/node_modules/@react-navigation/bottom-tabs/src/types.tsx
@@ -1,13 +1,3 @@
-import type { HeaderOptions } from '@react-navigation/elements';
-import type {
-  Descriptor,
-  NavigationHelpers,
-  NavigationProp,
-  ParamListBase,
-  RouteProp,
-  TabActionHelpers,
-  TabNavigationState,
-} from '@react-navigation/native';
 import type * as React from 'react';
 import type {
   Animated,
@@ -18,6 +8,16 @@ import type {
   ViewStyle,
 } from 'react-native';
 import type { EdgeInsets } from 'react-native-safe-area-context';
+import type { HeaderOptions } from '@react-navigation/elements';
+import type {
+  Descriptor,
+  NavigationHelpers,
+  NavigationProp,
+  ParamListBase,
+  RouteProp,
+  TabActionHelpers,
+  TabNavigationState,
+} from '@react-navigation/native';
 
 export type Layout = { width: number; height: number };
 
@@ -43,7 +43,7 @@ export type BottomTabNavigationHelpers = NavigationHelpers<
 export type BottomTabNavigationProp<
   ParamList extends ParamListBase,
   RouteName extends keyof ParamList = keyof ParamList,
-  NavigatorID extends string | undefined = undefined
+  NavigatorID extends string | undefined = undefined,
 > = NavigationProp<
   ParamList,
   RouteName,
@@ -57,7 +57,7 @@ export type BottomTabNavigationProp<
 export type BottomTabScreenProps<
   ParamList extends ParamListBase,
   RouteName extends keyof ParamList = keyof ParamList,
-  NavigatorID extends string | undefined = undefined
+  NavigatorID extends string | undefined = undefined,
 > = {
   navigation: BottomTabNavigationProp<ParamList, RouteName, NavigatorID>;
   route: RouteProp<ParamList, RouteName>;
@@ -79,16 +79,48 @@ export type SpringKeyboardAnimationConfig = {
   >;
 };
 
+// POI TYPES
+export type Optional<T> = T | undefined;
+
 export type TabBarVisibilityAnimationConfig =
   | TimingKeyboardAnimationConfig
   | SpringKeyboardAnimationConfig;
 
+export type POIProofProgress = {
+  status: POIProofEventStatus | POIProofEventStatusUI;
+  progress: number;
+  listKey: string;
+  txid: string;
+  railgunTxid: string;
+  index: number;
+  totalCount: number;
+  errMessage: Optional<string>;
+};
+
+export enum POIProofEventStatus {
+  LoadingNextBatch = 'LoadingNextBatch',
+  InProgress = 'InProgress',
+  Error = 'Error',
+  AllProofsCompleted = 'AllProofsCompleted',
+}
+
+export enum POIProofEventStatusUI {
+  NewTransactionLoading = 'NewTransactionLoading',
+}
+
 export type BottomTabNavigationOptions = HeaderOptions & {
   /**
    * Title text for the screen.
    */
   title?: string;
 
+  // Props for the POI Progress Bar.
+  poiProgressData?: POIProofProgress;
+  onTapPOIData?: () => void;
+  POIModal?: React.ReactNode;
+  POISuccessIcon?: React.ReactNode;
+  shouldShowAllProofsCompleted?: boolean;
+
   /**
    * Title string of a tab displayed in the tab bar
    * or a function that given { focused: boolean, color: string, position: 'below-icon' | 'beside-icon', children: string } returns a React.Node to display in tab bar.
@@ -324,6 +356,6 @@ export type BottomTabBarButtonProps = Omit<
   to?: string;
   children: React.ReactNode;
   onPress?: (
-    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent
+    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent,
   ) => void;
 };
diff --git a/node_modules/@react-navigation/bottom-tabs/src/views/BottomTabView.tsx b/node_modules/@react-navigation/bottom-tabs/src/views/BottomTabView.tsx
index f50d37a..79c9e82 100644
--- a/node_modules/@react-navigation/bottom-tabs/src/views/BottomTabView.tsx
+++ b/node_modules/@react-navigation/bottom-tabs/src/views/BottomTabView.tsx
@@ -24,6 +24,7 @@ import BottomTabBarHeightCallbackContext from '../utils/BottomTabBarHeightCallba
 import BottomTabBarHeightContext from '../utils/BottomTabBarHeightContext';
 import BottomTabBar, { getTabBarHeight } from './BottomTabBar';
 import { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';
+import RailwayPOIProgress from '@react-navigation/bottom-tabs/src/views/RailwayPOIProgress';
 
 type Props = BottomTabNavigationConfig & {
   state: TabNavigationState<ParamListBase>;
@@ -67,10 +68,24 @@ export default function BottomTabView(props: Props) {
   );
 
   const renderTabBar = () => {
+    const shouldShowAllProofsCompleted = descriptors[state.routes[state.index].key].options.shouldShowAllProofsCompleted;
+    const poiProgressData = descriptors[state.routes[state.index].key].options.poiProgressData;
+    const onTapPOIData = descriptors[state.routes[state.index].key].options.onTapPOIData;
+    const POIModal = descriptors[state.routes[state.index].key].options.POIModal;
+    const POISuccessIcon = descriptors[state.routes[state.index].key].options.POISuccessIcon;
+
     return (
       <SafeAreaInsetsContext.Consumer>
         {(insets) =>
-          tabBar({
+        <>
+          <RailwayPOIProgress 
+            POIModal={POIModal}
+            onTapPOIData={onTapPOIData}
+            POISuccessIcon={POISuccessIcon}
+            poiProgressData={poiProgressData}
+            shouldShowAllProofsCompleted={shouldShowAllProofsCompleted}
+          />
+          {tabBar({
             state: state,
             descriptors: descriptors,
             navigation: navigation,
@@ -80,7 +95,8 @@ export default function BottomTabView(props: Props) {
               bottom: safeAreaInsets?.bottom ?? insets?.bottom ?? 0,
               left: safeAreaInsets?.left ?? insets?.left ?? 0,
             },
-          })
+          })}
+          </>
         }
       </SafeAreaInsetsContext.Consumer>
     );
diff --git a/node_modules/@react-navigation/bottom-tabs/src/views/RailwayPOIProgress.tsx b/node_modules/@react-navigation/bottom-tabs/src/views/RailwayPOIProgress.tsx
new file mode 100644
index 0000000..a565a5c
--- /dev/null
+++ b/node_modules/@react-navigation/bottom-tabs/src/views/RailwayPOIProgress.tsx
@@ -0,0 +1,152 @@
+import * as React from 'react';
+import {
+  ActivityIndicator,
+  Animated,
+  Easing,
+  Platform,
+  StyleSheet,
+  Text,
+  TouchableOpacity,
+  View,
+} from 'react-native';
+import {
+  POIProofEventStatus,
+  POIProofEventStatusUI,
+  POIProofProgress,
+} from '@react-navigation/bottom-tabs/src/types';
+
+type Props = {
+  poiProgressData?: POIProofProgress;
+  shouldShowAllProofsCompleted?: boolean;
+  onTapPOIData?: () => void;
+  POIModal?: React.ReactNode;
+  POISuccessIcon?: React.ReactNode;
+};
+
+const IS_ANDROID = Platform.OS === 'android';
+const isDefined = a => {
+  return typeof a !== 'undefined' && a !== null;
+};
+
+const RailwayPOIProgress = ({
+  poiProgressData,
+  shouldShowAllProofsCompleted,
+  onTapPOIData,
+  POIModal,
+  POISuccessIcon,
+}: Props) => {
+    const newTrxProcessing =
+    poiProgressData?.status ===
+    POIProofEventStatusUI.NewTransactionLoading;
+  const loadingNextBatch =
+    poiProgressData?.status === POIProofEventStatus.LoadingNextBatch;
+  const inProgress = poiProgressData?.status === POIProofEventStatus.InProgress;
+  const error = poiProgressData?.errMessage;
+  const progress = poiProgressData?.progress ?? 0;
+  const totalPOIs = poiProgressData?.totalCount ?? 0;
+  const currentPOIIndex = poiProgressData?.index ?? 0;
+
+  const [animatedProgress] = React.useState(new Animated.Value(progress));
+  
+  React.useEffect(() => {
+    Animated.timing(animatedProgress, {
+      toValue: progress,
+      duration: 400,
+      easing: Easing.linear,
+      useNativeDriver: false,
+    }).start();
+  }, [animatedProgress, progress]);
+
+  const shouldShowPOIToast = () => {
+    if (shouldShowAllProofsCompleted || newTrxProcessing) {
+      return true;
+    }
+
+    if (poiProgressData) {
+      if (inProgress && poiProgressData.totalCount === 0) {
+        return false;
+      }
+      return true;
+    }
+    return false;
+  };
+
+  if (!shouldShowPOIToast()) {
+    return null;
+  }
+
+  return (
+    <View style={styles.container}>
+      <TouchableOpacity
+        style={[
+          styles.textContainer,
+          isDefined(error) && styles.textContainerError,
+        ]}
+        onPress={onTapPOIData}
+      >
+        {(loadingNextBatch || newTrxProcessing) ? (
+          <ActivityIndicator size="small" />
+        ) : shouldShowAllProofsCompleted ? (
+          POISuccessIcon
+        ) : (
+          <Text
+            style={styles.progressText}
+          >{`PPOI ${isDefined(poiProgressData?.index) ? currentPOIIndex + 1 : 0}/${totalPOIs}`}</Text>
+        )}
+      </TouchableOpacity>
+      <Animated.View
+        style={[
+          styles.progressBar,
+          {
+            width: animatedProgress.interpolate({
+              inputRange: [0, 100],
+              outputRange: ['0%', '100%'],
+            }),
+          },
+          isDefined(error) && styles.progressBarError,
+        ]}
+      />
+      {POIModal}
+    </View>
+  );
+};
+
+const styles = StyleSheet.create({
+  container: {
+    flexDirection: 'row',
+    width: '100%',
+    // borderTopWidth: 1,
+    // borderColor: '#cccccc50',
+    // backgroundColor: 'transparent',
+    position: 'relative',
+    backgroundColor: IS_ANDROID ? 'rgb(44, 44, 46)' : 'rgb(23, 23, 23)',
+    height: 5,
+    alignItems: 'center',
+  },
+  textContainer: {
+    backgroundColor: IS_ANDROID ? 'rgb(44, 44, 46)' : 'rgb(23, 23, 23)',
+    padding: 8,
+    position: 'absolute',
+    top: IS_ANDROID ? -42 : -40,
+    left: 5,
+    borderRadius: 5,
+    borderColor: '#cccccc50',
+    borderWidth: 1,
+  },
+  progressBar: {
+    height: 5,
+    backgroundColor: 'rgba(5, 158, 121, 1)',
+  },
+  progressText: {
+    color: 'white',
+    fontSize: 15,
+  },
+  progressBarError: {
+    backgroundColor: '#ff0000',
+  },
+  textContainerError: {
+    borderColor: '#ff0000',
+  },
+});
+
+export default RailwayPOIProgress;
