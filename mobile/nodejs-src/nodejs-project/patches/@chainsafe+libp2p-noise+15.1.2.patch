diff --git a/node_modules/@chainsafe/libp2p-noise/dist/src/crypto/index.js b/node_modules/@chainsafe/libp2p-noise/dist/src/crypto/index.js
index 8ebcdfd..dd1eaf3 100644
--- a/node_modules/@chainsafe/libp2p-noise/dist/src/crypto/index.js
+++ b/node_modules/@chainsafe/libp2p-noise/dist/src/crypto/index.js
@@ -1,11 +1,7 @@
 import crypto from 'node:crypto';
-import { newInstance, ChaCha20Poly1305 } from '@chainsafe/as-chacha20poly1305';
-import { digest } from '@chainsafe/as-sha256';
 import { Uint8ArrayList } from 'uint8arraylist';
 import { isElectronMain } from 'wherearewe';
 import { pureJsCrypto } from './js.js';
-const ctx = newInstance();
-const asImpl = new ChaCha20Poly1305(ctx);
 const CHACHA_POLY1305 = 'chacha20-poly1305';
 const PKCS8_PREFIX = Buffer.from([0x30, 0x2e, 0x02, 0x01, 0x00, 0x30, 0x05, 0x06, 0x03, 0x2b, 0x65, 0x6e, 0x04, 0x22, 0x04, 0x20]);
 const X25519_PREFIX = Buffer.from([0x30, 0x2a, 0x30, 0x05, 0x06, 0x03, 0x2b, 0x65, 0x6e, 0x03, 0x21, 0x00]);
@@ -77,21 +73,6 @@ const nodeCrypto = {
         return output;
     }
 };
-const asCrypto = {
-    hashSHA256(data) {
-        return digest(data.subarray());
-    },
-    chaCha20Poly1305Encrypt(plaintext, nonce, ad, k) {
-        return asImpl.seal(k, nonce, plaintext.subarray(), ad);
-    },
-    chaCha20Poly1305Decrypt(ciphertext, nonce, ad, k, dst) {
-        const plaintext = asImpl.open(k, nonce, ciphertext.subarray(), ad, dst);
-        if (!plaintext) {
-            throw new Error('Invalid chacha20poly1305 decryption');
-        }
-        return plaintext;
-    }
-};
 // benchmarks show that for chacha20poly1305
 // the as implementation is faster for smaller payloads(<1200)
 // and the node implementation is faster for larger payloads
@@ -101,15 +82,9 @@ export const defaultCrypto = {
         return nodeCrypto.hashSHA256(data);
     },
     chaCha20Poly1305Encrypt(plaintext, nonce, ad, k) {
-        if (plaintext.byteLength < 1200) {
-            return asCrypto.chaCha20Poly1305Encrypt(plaintext, nonce, ad, k);
-        }
         return nodeCrypto.chaCha20Poly1305Encrypt(plaintext, nonce, ad, k);
     },
     chaCha20Poly1305Decrypt(ciphertext, nonce, ad, k, dst) {
-        if (ciphertext.byteLength < 1200) {
-            return asCrypto.chaCha20Poly1305Decrypt(ciphertext, nonce, ad, k, dst);
-        }
         return nodeCrypto.chaCha20Poly1305Decrypt(ciphertext, nonce, ad, k, dst);
     },
     generateX25519KeyPair() {
@@ -180,9 +155,4 @@ export const defaultCrypto = {
         });
     }
 };
-// no chacha20-poly1305 in electron https://github.com/electron/electron/issues/24024
-if (isElectronMain) {
-    defaultCrypto.chaCha20Poly1305Encrypt = asCrypto.chaCha20Poly1305Encrypt;
-    defaultCrypto.chaCha20Poly1305Decrypt = asCrypto.chaCha20Poly1305Decrypt;
-}
-//# sourceMappingURL=index.js.map
\ No newline at end of file
+//# sourceMappingURL=indx.js.map
diff --git a/node_modules/@chainsafe/libp2p-noise/src/crypto/index.ts b/node_modules/@chainsafe/libp2p-noise/src/crypto/index.ts
index bd9d288..bec0e3f 100644
--- a/node_modules/@chainsafe/libp2p-noise/src/crypto/index.ts
+++ b/node_modules/@chainsafe/libp2p-noise/src/crypto/index.ts
@@ -1,14 +1,9 @@
 import crypto from 'node:crypto'
-import { newInstance, ChaCha20Poly1305 } from '@chainsafe/as-chacha20poly1305'
-import { digest } from '@chainsafe/as-sha256'
 import { Uint8ArrayList } from 'uint8arraylist'
-import { isElectronMain } from 'wherearewe'
 import { pureJsCrypto } from './js.js'
 import type { ICryptoInterface } from '../crypto.js'
 import type { KeyPair } from '../types.js'
 
-const ctx = newInstance()
-const asImpl = new ChaCha20Poly1305(ctx)
 const CHACHA_POLY1305 = 'chacha20-poly1305'
 const PKCS8_PREFIX = Buffer.from([0x30, 0x2e, 0x02, 0x01, 0x00, 0x30, 0x05, 0x06, 0x03, 0x2b, 0x65, 0x6e, 0x04, 0x22, 0x04, 0x20])
 const X25519_PREFIX = Buffer.from([0x30, 0x2a, 0x30, 0x05, 0x06, 0x03, 0x2b, 0x65, 0x6e, 0x03, 0x21, 0x00])
@@ -104,22 +99,6 @@ const nodeCrypto: Pick<ICryptoInterface, 'hashSHA256' | 'chaCha20Poly1305Encrypt
   }
 }
 
-const asCrypto: Pick<ICryptoInterface, 'hashSHA256' | 'chaCha20Poly1305Encrypt' | 'chaCha20Poly1305Decrypt'> = {
-  hashSHA256 (data) {
-    return digest(data.subarray())
-  },
-  chaCha20Poly1305Encrypt (plaintext, nonce, ad, k) {
-    return asImpl.seal(k, nonce, plaintext.subarray(), ad)
-  },
-  chaCha20Poly1305Decrypt (ciphertext, nonce, ad, k, dst) {
-    const plaintext = asImpl.open(k, nonce, ciphertext.subarray(), ad, dst)
-    if (!plaintext) {
-      throw new Error('Invalid chacha20poly1305 decryption')
-    }
-    return plaintext
-  }
-}
-
 // benchmarks show that for chacha20poly1305
 // the as implementation is faster for smaller payloads(<1200)
 // and the node implementation is faster for larger payloads
@@ -129,15 +108,9 @@ export const defaultCrypto: ICryptoInterface = {
     return nodeCrypto.hashSHA256(data)
   },
   chaCha20Poly1305Encrypt (plaintext, nonce, ad, k) {
-    if (plaintext.byteLength < 1200) {
-      return asCrypto.chaCha20Poly1305Encrypt(plaintext, nonce, ad, k)
-    }
     return nodeCrypto.chaCha20Poly1305Encrypt(plaintext, nonce, ad, k)
   },
   chaCha20Poly1305Decrypt (ciphertext, nonce, ad, k, dst) {
-    if (ciphertext.byteLength < 1200) {
-      return asCrypto.chaCha20Poly1305Decrypt(ciphertext, nonce, ad, k, dst)
-    }
     return nodeCrypto.chaCha20Poly1305Decrypt(ciphertext, nonce, ad, k, dst)
   },
   generateX25519KeyPair (): KeyPair {
@@ -211,9 +184,3 @@ export const defaultCrypto: ICryptoInterface = {
     })
   }
 }
-
-// no chacha20-poly1305 in electron https://github.com/electron/electron/issues/24024
-if (isElectronMain) {
-  defaultCrypto.chaCha20Poly1305Encrypt = asCrypto.chaCha20Poly1305Encrypt
-  defaultCrypto.chaCha20Poly1305Decrypt = asCrypto.chaCha20Poly1305Decrypt
-}
